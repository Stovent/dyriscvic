use crate::common::{instruction::*, types::*};

pub trait I32 {
    fn load_execute_i32(&mut self);
    fn UNKNOWN(&mut self);
    fn ADD(&mut self);
    fn ADDI(&mut self);
    fn AND(&mut self);
    fn ANDI(&mut self);
    fn AUIPC(&mut self);
    fn BEQ(&mut self);
    fn BGE(&mut self);
    fn BGEU(&mut self);
    fn BLT(&mut self);
    fn BLTU(&mut self);
    fn BNE(&mut self);
    fn EBREAK(&mut self);
    fn ECALL(&mut self);
    fn FENCE(&mut self);
    fn JAL(&mut self);
    fn JALR(&mut self);
    fn LB(&mut self);
    fn LBU(&mut self);
    fn LH(&mut self);
    fn LHU(&mut self);
    fn LUI(&mut self);
    fn LW(&mut self);
    fn OR(&mut self);
    fn ORI(&mut self);
    fn SB(&mut self);
    fn SH(&mut self);
    fn SLL(&mut self);
    fn SLLI(&mut self);
    fn SLT(&mut self);
    fn SLTI(&mut self);
    fn SLTIU(&mut self);
    fn SLTU(&mut self);
    fn SRA(&mut self);
    fn SRAI(&mut self);
    fn SRL(&mut self);
    fn SRLI(&mut self);
    fn SUB(&mut self);
    fn SW(&mut self);
    fn XOR(&mut self);
    fn XORI(&mut self);
}

pub trait DisassembleI32<U: Unsigned<S>, S: Signed<U>> {
    fn load_disassemble_i32(&mut self);
    fn disassemble_UNKNOWN(inst: Instruction<U, S>);
    fn disassemble_ADD(inst: Instruction<U, S>);
    fn disassemble_ADDI(inst: Instruction<U, S>);
    fn disassemble_AND(inst: Instruction<U, S>);
    fn disassemble_ANDI(inst: Instruction<U, S>);
    fn disassemble_AUIPC(inst: Instruction<U, S>);
    fn disassemble_BEQ(inst: Instruction<U, S>);
    fn disassemble_BGE(inst: Instruction<U, S>);
    fn disassemble_BGEU(inst: Instruction<U, S>);
    fn disassemble_BLT(inst: Instruction<U, S>);
    fn disassemble_BLTU(inst: Instruction<U, S>);
    fn disassemble_BNE(inst: Instruction<U, S>);
    fn disassemble_EBREAK(inst: Instruction<U, S>);
    fn disassemble_ECALL(inst: Instruction<U, S>);
    fn disassemble_FENCE(inst: Instruction<U, S>);
    fn disassemble_JAL(inst: Instruction<U, S>);
    fn disassemble_JALR(inst: Instruction<U, S>);
    fn disassemble_LB(inst: Instruction<U, S>);
    fn disassemble_LBU(inst: Instruction<U, S>);
    fn disassemble_LH(inst: Instruction<U, S>);
    fn disassemble_LHU(inst: Instruction<U, S>);
    fn disassemble_LUI(inst: Instruction<U, S>);
    fn disassemble_LW(inst: Instruction<U, S>);
    fn disassemble_OR(inst: Instruction<U, S>);
    fn disassemble_ORI(inst: Instruction<U, S>);
    fn disassemble_SB(inst: Instruction<U, S>);
    fn disassemble_SH(inst: Instruction<U, S>);
    fn disassemble_SLL(inst: Instruction<U, S>);
    fn disassemble_SLLI(inst: Instruction<U, S>);
    fn disassemble_SLT(inst: Instruction<U, S>);
    fn disassemble_SLTI(inst: Instruction<U, S>);
    fn disassemble_SLTIU(inst: Instruction<U, S>);
    fn disassemble_SLTU(inst: Instruction<U, S>);
    fn disassemble_SRA(inst: Instruction<U, S>);
    fn disassemble_SRAI(inst: Instruction<U, S>);
    fn disassemble_SRL(inst: Instruction<U, S>);
    fn disassemble_SRLI(inst: Instruction<U, S>);
    fn disassemble_SUB(inst: Instruction<U, S>);
    fn disassemble_SW(inst: Instruction<U, S>);
    fn disassemble_XOR(inst: Instruction<U, S>);
    fn disassemble_XORI(inst: Instruction<U, S>);
}
